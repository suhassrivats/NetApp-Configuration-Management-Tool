function FileData_Pairs(x)
{
x.t("debugging","purposes");
x.t("parameter","optional");
x.t("$elt","children");
x.t("$elt","object");
x.t("naelement::has_children","prototype");
x.t("child_add_string","$name");
x.t("within","i/o");
x.t("naelement::set_content","prototype");
x.t("create","i/o");
x.t("description","$elt");
x.t("description","creates");
x.t("description","checks");
x.t("description","$content");
x.t("description","constructs");
x.t("description","sets");
x.t("description","input");
x.t("description","prints");
x.t("description","retrieves");
x.t("description","$xml_str");
x.t("description","syntax");
x.t("description","adds");
x.t("description","encodes");
x.t("description","$name");
x.t("description","returns");
x.t("description","gets");
x.t("decrypted","value");
x.t("children_get","description");
x.t("key","$key");
x.t("key","undef");
x.t("key","return");
x.t("key","used");
x.t("current","element");
x.t("current","object");
x.t("creates","new");
x.t("double","quote");
x.t("topic","helpful");
x.t("topic","perl");
x.t("pair","nest");
x.t("handled","appropriately");
x.t("arbitrarily","within");
x.t("arbitrarily","returned");
x.t("child_get_int","($name)");
x.t("type","naelement");
x.t("naelement::child_get_int","prototype");
x.t("typedefs","api");
x.t("encrypts","$value");
x.t("parsing","xml");
x.t("apis","topic");
x.t("apis","input");
x.t("apis","perl");
x.t("apis","used");
x.t("default","key");
x.t("checks","whether");
x.t("element","$elt");
x.t("element","current");
x.t("element","found");
x.t("element","$content");
x.t("element","$key");
x.t("element","undef");
x.t("element","raw");
x.t("element","$value");
x.t("element","typedef");
x.t("element","return");
x.t("element","given");
x.t("element","named");
x.t("element","naelement::children_get");
x.t("element","perl");
x.t("element","created");
x.t("element","child");
x.t("new","$name");
x.t("new","i/o");
x.t("new","object");
x.t("($name)","description");
x.t("objects","type");
x.t("single","quote");
x.t("child_add","($elt)");
x.t("list","current");
x.t("list","children");
x.t("appropriately","api");
x.t("appropriately","return");
x.t("found","naelement::child_get_int");
x.t("found","naelement::sprintf");
x.t("found","naelement::get_content");
x.t("found","naelement::child_get_string");
x.t("found","naelement::child_get_string_encrypted");
x.t("need","handled");
x.t("add","input");
x.t("child_get_string","($name)");
x.t("guide","sdk");
x.t("api","debugging");
x.t("api","element");
x.t("api","input");
x.t("api","special");
x.t("api","names");
x.t("api","child_get_string_encrypted");
x.t("$content","input");
x.t("$content","value");
x.t("naelement::sprintf","prototype");
x.t("has_children","description");
x.t("toencodedstring","description");
x.t("name","element");
x.t("name","value");
x.t("name","child");
x.t("($elt)","description");
x.t("naelement::new","prototype");
x.t("naelement::get_content","prototype");
x.t("netapp","2017");
x.t("netapp","manageability");
x.t("(i/o)","element");
x.t("constructs","new");
x.t("none","naelement::set_content");
x.t("none","naelement::child_add_string_encrypted");
x.t("none","naelement::child_add_string");
x.t("none","naelement::child_get");
x.t("useful","passing");
x.t("helpful","send");
x.t("$key","description");
x.t("$key","default");
x.t("$key","encrypt");
x.t("$key","adds");
x.t("$key","encryption");
x.t("$key","decryption");
x.t("sdk","olh");
x.t("sdk","core");
x.t("set_content","($content)");
x.t("sprintf","description");
x.t("encoded","string");
x.t("olh","master");
x.t("name-value","pair");
x.t("sets","value");
x.t("child_get","($name)");
x.t("array","objects");
x.t("array","return");
x.t("string","xml");
x.t("string","return");
x.t("string","values");
x.t("string","containing");
x.t("input","description");
x.t("input","element");
x.t("input","string");
x.t("input","input");
x.t("input","types");
x.t("input","return");
x.t("input","output");
x.t("input","data");
x.t("naelement::child_add_string_encrypted","prototype");
x.t("prints","current");
x.t("characters","ampersand");
x.t("characters","core");
x.t("characters","result");
x.t("retrieves","api");
x.t("retrieves","value");
x.t("retrieves","content");
x.t("$xml_str","raw");
x.t("unexpected","parsing");
x.t("undef","input");
x.t("undef","returned");
x.t("undef","returns");
x.t("undef","child");
x.t("raw","xml");
x.t("syntax","input");
x.t("naelement::child_add_string","prototype");
x.t("know","value");
x.t("decrypt","$value");
x.t("decrypt","value");
x.t("ampersand","less");
x.t("reason","failure");
x.t("$value","description");
x.t("$value","key");
x.t("$value","appropriately");
x.t("$value","$key");
x.t("$value","adds");
x.t("$value","value");
x.t("naelement::child_add","prototype");
x.t("retrieve","value");
x.t("($xml_str)","description");
x.t("quote","double");
x.t("quote","mainly");
x.t("parent","topic");
x.t("comments","netapp");
x.t("whether","current");
x.t("xml","string");
x.t("xml","input");
x.t("xml","format");
x.t("xml","data");
x.t("xml","containers");
x.t("types","input");
x.t("typedef","input");
x.t("typedef","elements");
x.t("encrypt","decrypt");
x.t("returned","element");
x.t("returned","input");
x.t("format","api");
x.t("format","parent");
x.t("nest","arbitrarily");
x.t("nest","elements");
x.t("assigned","element");
x.t("2017","netapp");
x.t("child_add_string_encrypted","$name");
x.t("master","programming");
x.t("return","value");
x.t("return","values");
x.t("adds","element");
x.t("adds","new");
x.t("naelement","naelement::has_children");
x.t("naelement","default");
x.t("naelement","return");
x.t("naelement","given");
x.t("naelement","named");
x.t("naelement","client-side");
x.t("naelement","used");
x.t("naelement","class");
x.t("naelement","object");
x.t("given","key");
x.t("given","name");
x.t("given","$name");
x.t("server-side","know");
x.t("recursively","xml");
x.t("encodes","string");
x.t("greater","single");
x.t("manageability","sdk");
x.t("encryption","key");
x.t("less","greater");
x.t("naelement::child_get","prototype");
x.t("parse_raw_xml","($xml_str)");
x.t("failure","naelement::toencodedstring");
x.t("core","apis");
x.t("core","api");
x.t("represented","naelement");
x.t("similar","xml");
x.t("value","decrypted");
x.t("value","current");
x.t("value","element");
x.t("value","none");
x.t("value","$key");
x.t("value","encoded");
x.t("value","array");
x.t("value","input");
x.t("value","retrieve");
x.t("value","xml");
x.t("value","assigned");
x.t("value","naelement");
x.t("value","value");
x.t("value","decrypts");
x.t("value","integer");
x.t("value","i/o");
x.t("value","child");
x.t("value","content");
x.t("named","$name");
x.t("naelement::parse_raw_xml","prototype");
x.t("naelement::toencodedstring","prototype");
x.t("prototype","child_add_string");
x.t("prototype","children_get");
x.t("prototype","child_get_int");
x.t("prototype","new");
x.t("prototype","child_add");
x.t("prototype","child_get_string");
x.t("prototype","has_children");
x.t("prototype","toencodedstring");
x.t("prototype","set_content");
x.t("prototype","sprintf");
x.t("prototype","child_get");
x.t("prototype","child_add_string_encrypted");
x.t("prototype","parse_raw_xml");
x.t("prototype","get_content");
x.t("prototype","child_get_string_encrypted");
x.t("naelement::child_get_string","prototype");
x.t("decrypts","key");
x.t("get_content","description");
x.t("send","comments");
x.t("programming","guide");
x.t("($content)","description");
x.t("output","(i/o)");
x.t("output","management");
x.t("page","contains");
x.t("client-side","server-side");
x.t("naelement::children_get","prototype");
x.t("purposes","return");
x.t("information","input");
x.t("optional","typedefs");
x.t("data","therefore");
x.t("data","success");
x.t("perl","netapp");
x.t("perl","input");
x.t("perl","core");
x.t("perl","represented");
x.t("perl","including");
x.t("naelement::child_get_string_encrypted","prototype");
x.t("result","unexpected");
x.t("values","naelement::new");
x.t("values","containing");
x.t("children","list");
x.t("children","array");
x.t("containers","name-value");
x.t("integer","input");
x.t("integer","value");
x.t("created","parameter");
x.t("management","apis");
x.t("elements","arbitrarily");
x.t("elements","input");
x.t("elements","typedef");
x.t("elements","recursively");
x.t("elements","similar");
x.t("elements","value");
x.t("elements","naelement::parse_raw_xml");
x.t("elements","page");
x.t("elements","i/o");
x.t("used","create");
x.t("used","add");
x.t("used","given");
x.t("$name","current");
x.t("$name","encrypts");
x.t("$name","name");
x.t("$name","$key");
x.t("$name","undef");
x.t("$name","$value");
x.t("special","characters");
x.t("class","i/o");
x.t("containing","element");
x.t("containing","api");
x.t("containing","reason");
x.t("containing","special");
x.t("mainly","useful");
x.t("i/o","element");
x.t("i/o","elements");
x.t("i/o","management");
x.t("returns","decrypted");
x.t("returns","list");
x.t("returns","value");
x.t("names","return");
x.t("child","element");
x.t("child","named");
x.t("child","elements");
x.t("child","$name");
x.t("therefore","need");
x.t("including","description");
x.t("decryption","key");
x.t("success","naelement");
x.t("passing","string");
x.t("child_get_string_encrypted","decrypt");
x.t("child_get_string_encrypted","$name");
x.t("contains","information");
x.t("object","type");
x.t("object","retrieves");
x.t("object","naelement::child_add");
x.t("object","nest");
x.t("object","adds");
x.t("object","return");
x.t("object","naelement");
x.t("object","containing");
x.t("object","returns");
x.t("object","child");
x.t("gets","child");
x.t("content","element");
}
