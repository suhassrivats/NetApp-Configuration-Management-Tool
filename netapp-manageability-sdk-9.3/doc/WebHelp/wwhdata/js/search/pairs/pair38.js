function FileData_Pairs(x)
{
x.t("passed","api");
x.t("na_child_get_bool","na_elem_t");
x.t("na_child_get_bool","prototype");
x.t("tag","description");
x.t("tag","returned");
x.t("tag","na_elem_iter_t");
x.t("exist","na_child_get_string_encrypted");
x.t("exist","child");
x.t("converted","string");
x.t("within","input");
x.t("within","elements");
x.t("description","tag");
x.t("description","key");
x.t("description","creates");
x.t("description","checks");
x.t("description","sets");
x.t("description","input");
x.t("description","retrieves");
x.t("description","syntax");
x.t("description","adds");
x.t("description","elt");
x.t("description","repeatedly");
x.t("description","takes");
x.t("description","val");
x.t("description","gets");
x.t("decrypted","string");
x.t("decrypted","data");
x.t("decrypted","using");
x.t("key","description");
x.t("key","default");
x.t("key","const");
x.t("key","characters");
x.t("key","input");
x.t("key","adds");
x.t("key","return");
x.t("key","null");
x.t("key","used");
x.t("required","converted");
x.t("void","na_encrypt_basic");
x.t("creates","new");
x.t("na_child_add_uint64","na_elem_t");
x.t("na_child_add_uint64","prototype");
x.t("topic","helpful");
x.t("topic","core");
x.t("pair","encrypts");
x.t("pair","nest");
x.t("line","null");
x.t("arbitrarily","within");
x.t("provided","least");
x.t("type","description");
x.t("type","32-bit");
x.t("type","64-bit");
x.t("type","integer");
x.t("type","non-string");
x.t("explicitly","free");
x.t("however","api");
x.t("int64_t","default");
x.t("int64_t","deflt");
x.t("int64_t","na_child_get_int64");
x.t("int64_t","value");
x.t("int64_t","64-bit");
x.t("encrypts","data");
x.t("apis","topic");
x.t("apis","netapp");
x.t("apis","input");
x.t("apis","core");
x.t("apis","used");
x.t("apis","including");
x.t("32-bit","integer");
x.t("32-bit","unsigned");
x.t("default","key");
x.t("default","32-bit");
x.t("default","boolean");
x.t("default","value");
x.t("default","64-bit");
x.t("default","integer");
x.t("checks","whether");
x.t("element","exist");
x.t("element","key");
x.t("element","default");
x.t("element","list");
x.t("element","found");
x.t("element","iterator");
x.t("element","na_iterator_next");
x.t("element","name");
x.t("element","address");
x.t("element","deflt");
x.t("element","empty");
x.t("element","input");
x.t("element","contain");
x.t("element","raw");
x.t("element","xml");
x.t("element","added");
x.t("element","end");
x.t("element","return");
x.t("element","given");
x.t("element","null");
x.t("element","elt");
x.t("element","value");
x.t("element","eltname");
x.t("element","nested");
x.t("element","children");
x.t("element","management");
x.t("element","childelt");
x.t("element","i/o");
x.t("new","line");
x.t("new","element");
x.t("new","child");
x.t("contents","input");
x.t("na_zapi_get_elem_from_raw_xmlinput","char");
x.t("na_zapi_get_elem_from_raw_xmlinput","prototype");
x.t("list","input");
x.t("list","parent");
x.t("list","elt");
x.t("(false)","element");
x.t("(false)","failure");
x.t("na_child_get_string_encrypted","na_elem_t");
x.t("na_child_get_string_encrypted","prototype");
x.t("found","na_elem_get_content");
x.t("found","na_elem_get_name");
x.t("guide","sdk");
x.t("api","element");
x.t("api","input");
x.t("api","adds");
x.t("api","call");
x.t("na_elem_set_content","na_elem_t");
x.t("na_elem_set_content","prototype");
x.t("iterator","na_zapi_get_elem_from_raw_xmlinput");
x.t("iterator","looping");
x.t("iterator","return");
x.t("iterator","traversing");
x.t("iterator","walk");
x.t("na_iterator_next","iterator");
x.t("na_iterator_next","na_elem_iter_t");
x.t("na_iterator_next","prototype");
x.t("(elt)","input");
x.t("na_elem_sprintf","na_elem_t");
x.t("na_elem_sprintf","prototype");
x.t("false","true");
x.t("false","child");
x.t("na_child_get_int","na_elem_t");
x.t("na_child_get_int","prototype");
x.t("true","cases");
x.t("name","description");
x.t("name","however");
x.t("name","int64_t");
x.t("name","element");
x.t("name","const");
x.t("name","bool_t");
x.t("name","int");
x.t("name","given");
x.t("name","value");
x.t("name","uint32_t");
x.t("name","child");
x.t("name","uint64_t");
x.t("(true)","element");
x.t("(true)","success");
x.t("char","key");
x.t("char","na_child_get_string_encrypted");
x.t("char","na_elem_sprintf");
x.t("char","name");
x.t("char","string");
x.t("char","input");
x.t("char","decrypt");
x.t("char","na_elem_get_content");
x.t("char","na_elem_get_name");
x.t("char","encryption");
x.t("char","value");
x.t("char","output");
x.t("char","eltname");
x.t("char","na_child_get_string");
x.t("char","val");
x.t("char","pointer");
x.t("na_child_add_uint32","na_elem_t");
x.t("na_child_add_uint32","prototype");
x.t("na_child_get_uint64","na_elem_t");
x.t("na_child_get_uint64","prototype");
x.t("const","char");
x.t("bool_t","na_child_get_bool");
x.t("bool_t","default");
x.t("bool_t","deflt");
x.t("bytes","encrypts");
x.t("bytes","input");
x.t("netapp","2017");
x.t("netapp","manageability");
x.t("(i/o)","element");
x.t("modifies","value");
x.t("boolean","value");
x.t("none","na_child_iterator");
x.t("helpful","send");
x.t("sdk","olh");
x.t("sdk","core");
x.t("address","nested");
x.t("address","child");
x.t("encrypted","nbytes");
x.t("encrypted","output");
x.t("writes","string");
x.t("olh","master");
x.t("name-value","pair");
x.t("accessed","name");
x.t("int","default");
x.t("int","na_elem_set_content");
x.t("int","na_child_get_int");
x.t("int","deflt");
x.t("int","nbytes");
x.t("int","number");
x.t("int","na_elem_has_children");
x.t("int","value");
x.t("sets","iterator");
x.t("sets","modifies");
x.t("string","decrypted");
x.t("string","type");
x.t("string","contents");
x.t("string","name");
x.t("string","encrypted");
x.t("string","first");
x.t("string","return");
x.t("string","value");
x.t("string","buffer");
x.t("deflt","description");
x.t("deflt","int64_t");
x.t("deflt","bool_t");
x.t("deflt","int");
x.t("deflt","following");
x.t("empty","string");
x.t("input","description");
x.t("input","type");
x.t("input","char");
x.t("input","const");
x.t("input","string");
x.t("input","input");
x.t("input","space");
x.t("input","types");
x.t("input","return");
x.t("input","value");
x.t("input","output");
x.t("contain","value");
x.t("characters","output");
x.t("na_child_get_int64","na_elem_t");
x.t("na_child_get_int64","prototype");
x.t("nbytes","description");
x.t("nbytes","int");
x.t("retrieves","api");
x.t("raw","xml");
x.t("syntax","input");
x.t("decrypt","key");
x.t("next","item");
x.t("unordered","accessed");
x.t("first","passed");
x.t("space","provided");
x.t("space","input");
x.t("long","input");
x.t("number","bytes");
x.t("iterates","children");
x.t("terminated","new");
x.t("retrieve","value");
x.t("parent","topic");
x.t("parent","element");
x.t("comments","netapp");
x.t("whether","element");
x.t("na_child_add_string","na_elem_t");
x.t("na_child_add_string","prototype");
x.t("looping","children");
x.t("xml","na_elem_sprintf");
x.t("xml","input");
x.t("xml","format");
x.t("xml","containers");
x.t("types","input");
x.t("na_child_get_uint32","na_elem_t");
x.t("na_child_get_uint32","prototype");
x.t("returned","na_child_iterator");
x.t("returned","buffer");
x.t("format","writes");
x.t("format","terminated");
x.t("nest","arbitrarily");
x.t("added","parent");
x.t("assigned","child");
x.t("na_elem_get_content","na_elem_t");
x.t("na_elem_get_content","prototype");
x.t("2017","netapp");
x.t("end","nested");
x.t("master","programming");
x.t("return","value");
x.t("return","values");
x.t("adds","nested");
x.t("adds","child");
x.t("na_elem_get_name","na_elem_t");
x.t("na_elem_get_name","prototype");
x.t("given","tag");
x.t("given","key");
x.t("given","element");
x.t("given","name");
x.t("given","raw");
x.t("given","child");
x.t("memory","decrypted");
x.t("least","long");
x.t("assumptions","encryption");
x.t("manageability","sdk");
x.t("null","element");
x.t("null","given");
x.t("null","null");
x.t("null","failure");
x.t("null","na_elem_has_children");
x.t("null","case");
x.t("null","system");
x.t("null","child");
x.t("null","content");
x.t("encryption","key");
x.t("na_elem_iter_t","tag");
x.t("na_elem_iter_t","na_child_iterator");
x.t("na_elem_iter_t","pointer");
x.t("na_elem_t","description");
x.t("na_elem_t","na_child_add_uint64");
x.t("na_elem_t","na_zapi_get_elem_from_raw_xmlinput");
x.t("na_elem_t","na_iterator_next");
x.t("na_elem_t","na_child_add_uint32");
x.t("na_elem_t","const");
x.t("na_elem_t","na_child_add_string");
x.t("na_elem_t","elt");
x.t("na_elem_t","na_elem_child");
x.t("na_elem_t","na_child_add_int");
x.t("na_elem_t","childelt");
x.t("na_elem_t","pointer");
x.t("na_elem_t","na_child_add_string_encrypted");
x.t("na_elem_t","na_child_add");
x.t("na_elem_t","na_child_add_int64");
x.t("failure","na_child_get_bool");
x.t("failure","na_child_add_uint64");
x.t("failure","na_elem_set_content");
x.t("failure","na_child_add_uint32");
x.t("failure","parent");
x.t("failure","na_child_add_string");
x.t("failure","na_elem_child");
x.t("failure","na_child_add_int");
x.t("failure","na_child_add_string_encrypted");
x.t("failure","na_child_add_int64");
x.t("na_elem_has_children","na_elem_t");
x.t("na_elem_has_children","prototype");
x.t("na_encrypt_basic","const");
x.t("na_encrypt_basic","prototype");
x.t("core","apis");
x.t("value","description");
x.t("value","required");
x.t("value","pair");
x.t("value","type");
x.t("value","int64_t");
x.t("value","32-bit");
x.t("value","element");
x.t("value","false");
x.t("value","(true)");
x.t("value","name");
x.t("value","char");
x.t("value","na_child_get_uint64");
x.t("value","const");
x.t("value","boolean");
x.t("value","none");
x.t("value","address");
x.t("value","int");
x.t("value","string");
x.t("value","deflt");
x.t("value","input");
x.t("value","na_child_get_int64");
x.t("value","next");
x.t("value","retrieve");
x.t("value","na_child_get_uint32");
x.t("value","assigned");
x.t("value","adds");
x.t("value","return");
x.t("value","given");
x.t("value","encryption");
x.t("value","64-bit");
x.t("value","na_child_get_string");
x.t("value","uint32_t");
x.t("value","integer");
x.t("value","pointer");
x.t("value","series");
x.t("value","child");
x.t("value","uint64_t");
x.t("value","content");
x.t("similar","xml");
x.t("elt","description");
x.t("elt","const");
x.t("elt","string");
x.t("elt","input");
x.t("elt","return");
x.t("elt","given");
x.t("elt","na_elem_t");
x.t("elt","nested");
x.t("elt","call");
x.t("prototype","void");
x.t("prototype","int64_t");
x.t("prototype","char");
x.t("prototype","bool_t");
x.t("prototype","const");
x.t("prototype","int");
x.t("prototype","na_elem_iter_t");
x.t("prototype","na_elem_t");
x.t("prototype","uint32_t");
x.t("prototype","uint64_t");
x.t("64-bit","integer");
x.t("64-bit","unsigned");
x.t("free","returned");
x.t("free","na_free");
x.t("send","comments");
x.t("programming","guide");
x.t("na_child_iterator","(elt)");
x.t("na_child_iterator","na_elem_t");
x.t("na_child_iterator","prototype");
x.t("repeatedly","iterates");
x.t("na_free","api");
x.t("na_free","input");
x.t("takes","input");
x.t("output","element");
x.t("output","char");
x.t("output","(i/o)");
x.t("output","int");
x.t("output","space");
x.t("page","contains");
x.t("information","input");
x.t("data","explicitly");
x.t("data","assumptions");
x.t("data","null");
x.t("data","contained");
x.t("eltname","description");
x.t("eltname","const");
x.t("nested","element");
x.t("nested","elements");
x.t("nested","child");
x.t("na_child_get_string","na_elem_t");
x.t("na_child_get_string","prototype");
x.t("values","na_child_add");
x.t("case","failure");
x.t("uint32_t","32-bit");
x.t("uint32_t","deflt");
x.t("uint32_t","na_child_get_uint32");
x.t("uint32_t","value");
x.t("allocates","memory");
x.t("na_elem_child","na_elem_t");
x.t("na_elem_child","prototype");
x.t("children","element");
x.t("children","(false)");
x.t("children","na_encrypt_basic");
x.t("children","elt");
x.t("containers","name-value");
x.t("integer","adds");
x.t("integer","value");
x.t("cases","na_child_get_int");
x.t("val","description");
x.t("val","char");
x.t("na_child_add_int","na_elem_t");
x.t("na_child_add_int","prototype");
x.t("call","na_iterator_next");
x.t("call","input");
x.t("management","apis");
x.t("used","given");
x.t("used","value");
x.t("elements","within");
x.t("elements","unordered");
x.t("elements","similar");
x.t("elements","elt");
x.t("elements","page");
x.t("childelt","description");
x.t("childelt","parent");
x.t("childelt","na_elem_t");
x.t("pointer","decrypted");
x.t("pointer","element");
x.t("pointer","iterator");
x.t("pointer","api");
x.t("pointer","input");
x.t("pointer","raw");
x.t("pointer","parent");
x.t("pointer","child");
x.t("na_child_add_string_encrypted","na_elem_t");
x.t("na_child_add_string_encrypted","prototype");
x.t("contained","value");
x.t("following","conditions");
x.t("system","allocates");
x.t("traversing","child");
x.t("na_child_add","na_elem_t");
x.t("na_child_add","prototype");
x.t("na_child_add_int64","na_elem_t");
x.t("na_child_add_int64","prototype");
x.t("using","given");
x.t("using","na_free");
x.t("i/o","elements");
x.t("non-string","value");
x.t("series","bytes");
x.t("walk","nested");
x.t("child","element");
x.t("child","elements");
x.t("including","description");
x.t("unsigned","integer");
x.t("uint64_t","na_child_get_uint64");
x.t("uint64_t","deflt");
x.t("uint64_t","value");
x.t("uint64_t","64-bit");
x.t("success","(false)");
x.t("conditions","child");
x.t("buffer","free");
x.t("buffer","using");
x.t("contains","information");
x.t("gets","decrypted");
x.t("gets","32-bit");
x.t("gets","name");
x.t("gets","boolean");
x.t("gets","string");
x.t("gets","64-bit");
x.t("gets","integer");
x.t("gets","child");
x.t("gets","content");
x.t("content","element");
x.t("content","input");
x.t("item","iterator");
}
